/*  Project Name : Bad Sort
    Date: 4/12/2020
    Programmer: Jacob Mast
    Description: This program runs bad sort on arrays of random numbers
    generated by the computer system.  The program records the average running time 
    of the bad sort algorithm and prints this information to the screen.
*/


#include<iostream>
#include<fstream>
#include<assert.h>
#include<limits>
#include<time.h>
#include<ctime>
#include<cstdlib>
#include<cmath>
using namespace std;

void bad_sort(int arr[], int m, int n, float alpha);

int main(){

    //seed the random number generator
    srand(time(NULL));

    // open output file in write mode
    ofstream outfile1("bad.out");

    // variables for keeping track of time
    clock_t t1, t2;

    // declare variable for array length
    int n = 5000;

    // declare/set alpha variable
    float alpha;
    cout << "Enter the value of alpha: ";
    cin >> alpha;

    // repeat loop every 5,000 up to 40,000 (7x)
    while (n<=40000){

        // declare a float to keep time total
        float time = 0.00;

        // repeat loop measuring time of sort program 4 times for greater accuray
        // average results over 4 trials
        for (int j=0; j<4; j++){

            // declare array of size n
            int arr[n];

            // fill array with random numbers 0 to 10000
            for (int i=0; i<n; i++){
                arr[i] = rand()%10000+1;
                }

            // get clock measure before running insertion sort
            t1 = clock();

            // run bad sort function
            bad_sort(arr, 0, n - 1, alpha);

            // get clock measure after running insertion sort
            t2 = clock();

            // place difference of clock values in new float variable
            float diff ((float)t2-(float)t1);
            
            // translate clock value into seconds
            float seconds = diff/CLOCKS_PER_SEC;

            // Add time to total, will compute average of 4 trials after loop exits
            time = time + seconds;
        }

        // compute the average time over 4 trials
        float average = time/4.00;

        // print to screen the value of n and the time to run
        cout << "Array size: " << n << "\t Time to run: " << average << endl;
        
        // write values to output file
        outfile1 << n << " " << average << endl;
        
        // increment array size
        n = n + 5000;
    }

    // close the opened files
    outfile1.close();

    return 0;
}


// bad_sort function sorts an array using the bad sort alorithm

void bad_sort(int arr[], int m, int n, float alpha){

    if ((n == 2) && (arr[m] > arr[n])){
        int temp = arr [m];
        arr[m] = arr[n];
        arr[n] = temp;
    }

    // if there is more than one value in the array
    else if(n > 2){

        // get mid index
        float len = (float) n;
        int mid = round(alpha * len);

        if (mid == n){
            mid = mid - 1;
        }

        // recursive call to sort the left subarray
        bad_sort(arr, m, mid - 1, alpha);

        // recursive call to sort the right subarray
        bad_sort(arr, n - mid, n - 1, alpha);

        // recursive call to sort the left subarray again
        bad_sort(arr, m, mid - 1, alpha);
    }
}